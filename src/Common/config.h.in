/// This file was autogenerated by CMake

#pragma once

#cmakedefine01 USE_CPUID
#cmakedefine01 USE_BASE64
#cmakedefine01 USE_SSL
#cmakedefine01 USE_SSH
#cmakedefine01 USE_HDFS
#cmakedefine01 USE_AWS_S3
#cmakedefine01 USE_AZURE_BLOB_STORAGE
#cmakedefine01 USE_BROTLI
#cmakedefine01 USE_CASSANDRA
#cmakedefine01 USE_SENTRY
#cmakedefine01 USE_GRPC
#cmakedefine01 USE_SIMDJSON
#cmakedefine01 USE_RAPIDJSON
#cmakedefine01 USE_DATASKETCHES
#cmakedefine01 USE_YAML_CPP
#cmakedefine01 USE_BZIP2
#cmakedefine01 USE_MINIZIP
#cmakedefine01 USE_SNAPPY
#cmakedefine01 USE_HIVE
#cmakedefine01 USE_ODBC
#cmakedefine01 USE_REPLXX
#cmakedefine01 USE_JEMALLOC
#cmakedefine01 USE_GWP_ASAN
#cmakedefine01 USE_H3
#cmakedefine01 USE_S2_GEOMETRY
#cmakedefine01 USE_FASTOPS
#cmakedefine01 USE_SQIDS
#cmakedefine01 USE_IDNA
#cmakedefine01 USE_NLP
#cmakedefine01 USE_VECTORSCAN
#cmakedefine01 USE_LIBURING
#cmakedefine01 USE_AVRO
#cmakedefine01 USE_CAPNP
#cmakedefine01 USE_PARQUET
#cmakedefine01 USE_ORC
#cmakedefine01 USE_ARROW
#cmakedefine01 USE_PROTOBUF
#cmakedefine01 USE_MSGPACK
#cmakedefine01 USE_ICU
#cmakedefine01 USE_MYSQL
#cmakedefine01 USE_RDKAFKA
#cmakedefine01 USE_AMQPCPP
#cmakedefine01 USE_NATSIO
#cmakedefine01 USE_EMBEDDED_COMPILER
#cmakedefine01 USE_DWARF_PARSER
#cmakedefine01 USE_LDAP
#cmakedefine01 USE_ROCKSDB
#cmakedefine01 USE_LIBPQXX
#cmakedefine01 USE_SQLITE
#cmakedefine01 USE_NURAFT
#cmakedefine01 USE_KRB5
#cmakedefine01 USE_FILELOG
#cmakedefine01 USE_ODBC
#cmakedefine01 USE_BORINGSSL
#cmakedefine01 USE_BLAKE3
#cmakedefine01 USE_SKIM
#cmakedefine01 USE_PRQL
#cmakedefine01 USE_OPENSSL_INTREE
#cmakedefine01 USE_ULID
#cmakedefine01 FIU_ENABLE
#cmakedefine01 USE_BCRYPT
#cmakedefine01 USE_LIBARCHIVE
#cmakedefine01 USE_POCKETFFT
#cmakedefine01 USE_WRAPPED_ALLOCATOR

/// This is needed for .incbin in assembly. For some reason, include paths don't work there in presence of LTO.
/// That's why we use absolute paths.
#cmakedefine SOURCE_DIR "@SOURCE_DIR@"


#if USE_WRAPPED_ALLOCATOR
#define ALLOC_PREFIX(func) wrap_##func

#include <stddef.h>

extern "C"
{
    void *ALLOC_PREFIX(malloc)(size_t size);
    void ALLOC_PREFIX(free)(void *ptr);
    void *ALLOC_PREFIX(calloc)(size_t nmemb, size_t size);
    void *ALLOC_PREFIX(realloc)(void *ptr, size_t size);
    int ALLOC_PREFIX(posix_memalign)(void **memptr, size_t alignment, size_t size);
    void *ALLOC_PREFIX(aligned_alloc)(size_t alignment, size_t size);
    void *ALLOC_PREFIX(valloc)(size_t size);
    void *ALLOC_PREFIX(memalign)(size_t alignment, size_t size);
#if !defined(USE_MUSL)
    void *ALLOC_PREFIX(pvalloc)(size_t size);
#endif
#if defined(_GNU_SOURCE)
    size_t ALLOC_PREFIX(malloc_usable_size)(void *ptr);
#endif
    size_t ALLOC_PREFIX(malloc_cached_memory_size)();
    size_t ALLOC_PREFIX(malloc_allocated_memory_size)();
    void ALLOC_PREFIX(malloc_compact)();
}

#else
#define ALLOC_PREFIX(func) ::func
#endif
